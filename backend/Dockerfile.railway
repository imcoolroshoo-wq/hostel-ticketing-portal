# Multi-stage build for Railway deployment
FROM eclipse-temurin:17-jdk-alpine as build

# Set working directory
WORKDIR /app

# Install Maven
RUN apk add --no-cache maven

# Copy pom.xml first for better caching
COPY pom.xml ./

# Download dependencies
RUN mvn dependency:go-offline -B

# Copy source code
COPY src ./src

# Build the application
RUN mvn clean package -DskipTests -Dspring.profiles.active=railway

# Runtime stage
FROM eclipse-temurin:17-jre-alpine

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Copy the built JAR file from the build stage
COPY --from=build /app/target/*.jar app.jar

# Copy startup script and database initialization
COPY railway-start.sh /app/railway-start.sh
COPY ../railway-init.sql /app/railway-init.sql

# Install PostgreSQL client for database operations
RUN apk add --no-cache postgresql-client

# Create uploads directory and set permissions
RUN mkdir -p /tmp/uploads && \
    chmod +x /app/railway-start.sh && \
    chown -R appuser:appgroup /app /tmp/uploads

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/health || exit 1

# Set JVM options for Railway
ENV JAVA_OPTS="-Xmx400m -Xms200m -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"

# Run the application using startup script
ENTRYPOINT ["/app/railway-start.sh"]
