# Render Production Configuration
server:
  port: ${PORT:10000}
  servlet:
    context-path: /api

spring:
  # Application Configuration
  application:
    name: hostel-ticketing-portal
  
  # Database Configuration - Render PostgreSQL
  datasource:
    # Use Render's DATABASE_URL environment variable
    # Render provides URLs in postgresql:// format, but JDBC needs jdbc:postgresql://
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/hostel_ticketing}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 300000      # 5 minutes
      max-lifetime: 1200000     # 20 minutes
      validation-timeout: 5000
      leak-detection-threshold: 60000
      # Keep connections alive
      keepalive-time: 30000     # 30 seconds
      test-while-idle: true
      test-on-borrow: true
      test-on-return: false
      validation-query: SELECT 1

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        generate_statistics: false
        types:
          print_banner: false
        jdbc:
          time_zone: UTC
        # Additional settings for production stability
        # Removed provider_disables_autocommit to avoid conflict with HikariCP
        temp:
          use_jdbc_metadata_defaults: false
    defer-datasource-initialization: true
    open-in-view: true
  
  # SQL initialization - only run once 
  sql:
    init:
      mode: never
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: false

  # DISABLE Redis for Render (not available in free tier)
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration

  # Mail Configuration
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# Management Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    db:
      enabled: true
    diskspace:
      enabled: true

# Logging Configuration
logging:
  level:
    com.hostel: WARN  # Force our configuration logs to show
    com.hostel.config: WARN  # Force DatabaseConfig logs
    org.springframework.web: WARN
    org.springframework.boot.autoconfigure: DEBUG  # Show autoconfiguration
    org.springframework.context: DEBUG  # Show bean creation
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: 86400000 # 24 hours

# File Upload Configuration
file:
  upload:
    dir: /tmp/uploads/
    max-size: 10MB

# Cache Configuration
cache:
  redis:
    time-to-live: 3600 # 1 hour

# CORS Configuration - UPDATED FOR RENDER
cors:
  allow-all-origins: ${CORS_ALLOW_ALL_ORIGINS:true}
  allowed-origins: ${FRONTEND_URL:http://localhost:3000},https://hostel-ticketing-frontend.onrender.com,${CORS_ALLOWED_ORIGINS:}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
  allowed-headers: "*"
  allow-credentials: true
  max-age: 3600
